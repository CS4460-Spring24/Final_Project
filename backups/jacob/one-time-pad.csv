id,name,description,connection_info,max_attempts,value,category,type,state,requirements
7,One-time Pad,"Why shouldn't you reuse a one-time pad?  Decode parts of these three messages which were all encrypted with the same one-time pad to find out.

```
m1 XOR m2
00010111 00001001 00001011 00000000 00101111 01001100 00001001 00000110 01010110 00001100 01010011 01010100 00001100 00010000 01010011 00010010 00001110 00001000 00001001
m1 XOR m3
00010111 00001001 00001111 01001110 00100010 01010011 01001000 00000111 00011001 00010111 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
m2 XOR m3
00000000 00000000 00000100 01001110 00001101 00011111 01000001 00000001 01001111 00011011 01010011 01010100 00001100 00010000 01010011 00010010 00001110 00001000 00001001
```

*Guidelines*:

* Each message is given as a series of characters represented by their ASCII binary representation.
* __Assume that the original messages contain only lowercase letters and spaces__ (ASCII value for space is 00100000)
* Based on your hunch, you've decided that the original message __is probably about flags__.
* XOR, often denoted ⊕, means exclusive bitwise or.
	* Since one-time pads are applied by XOR with the original message, the key is cancelled out by applying XOR to two of these messages.  In other words, A ⊕ A = 0:
		```
		A = P1 ⊕ K
		B = P2 ⊕ K
		A ⊕ B = P1 ⊕ K ⊕ K ⊕ P2 = P1 ⊕ P2
		```

*Recommended Resources*:

* An ASCII table with binary representation of letters

<p style=""font-size: 8px"">Source: modified from an exercise in Introduction to Cryptography with Coding Theory by Trappe and Washington</p>",,0,30,Stream Ciphers,standard,visible,
